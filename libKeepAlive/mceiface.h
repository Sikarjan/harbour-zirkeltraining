/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p mceiface.h:mceiface.cpp mceiface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MCEIFACE_H
#define MCEIFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.nokia.mce.request
 */
class ComNokiaMceRequestInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.mce.request"; }

public:
    ComNokiaMceRequestInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComNokiaMceRequestInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> get_display_status()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("get_display_status"), argumentList);
    }

    inline QDBusPendingReply<QString> get_tklock_mode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("get_tklock_mode"), argumentList);
    }

    inline QDBusPendingReply<int> req_cpu_keepalive_period()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("req_cpu_keepalive_period"), argumentList);
    }

    inline QDBusPendingReply<> req_cpu_keepalive_start(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("req_cpu_keepalive_start"), argumentList);
    }

    inline QDBusPendingReply<> req_cpu_keepalive_stop(const QString &id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("req_cpu_keepalive_stop"), argumentList);
    }

    inline QDBusPendingReply<> req_display_blanking_pause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("req_display_blanking_pause"), argumentList);
    }

    inline QDBusPendingReply<> req_display_cancel_blanking_pause()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("req_display_cancel_blanking_pause"), argumentList);
    }

    inline QDBusPendingReply<> req_display_state_on()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("req_display_state_on"), argumentList);
    }

    inline QDBusPendingReply<> req_tklock_mode_change(const QString &mode)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(mode);
        return asyncCallWithArgumentList(QStringLiteral("req_tklock_mode_change"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

/*
 * Proxy class for interface com.nokia.mce.signal
 */
class ComNokiaMceSignalInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.mce.signal"; }

public:
    ComNokiaMceSignalInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComNokiaMceSignalInterface();

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
    void display_status_ind(const QString &status);
    void tklock_mode_ind(const QString &tklock_mode);
};

namespace com {
  namespace nokia {
    namespace mce {
      typedef ::ComNokiaMceRequestInterface request;
      typedef ::ComNokiaMceSignalInterface signal;
    }
  }
}
#endif
